#!/usr/bin/env python3
"""
Ethereum Transaction Interceptor CLI
Main entry point for the application
"""

import sys
import os
import argparse
from pathlib import Path

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def main():
    parser = argparse.ArgumentParser(
        description="Ethereum Transaction Interceptor & Simulator",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  eth-interceptor start          Start interceptor and monitor
  eth-interceptor intercept      Start interceptor only  
  eth-interceptor monitor        Start monitor only
  eth-interceptor trace TX_HASH  Trace a transaction
  eth-interceptor submit --latest Submit latest intercepted transaction
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Commands')
    
    # Start command (default - runs both interceptor and monitor)
    start_parser = subparsers.add_parser('start', help='Start interceptor and monitor')
    start_parser.add_argument('--port', type=int, default=8545, help='Port for interceptor')
    
    # Intercept command (interceptor only)
    intercept_parser = subparsers.add_parser('intercept', help='Start interceptor only')
    intercept_parser.add_argument('--port', type=int, default=8545, help='Port for interceptor')
    
    # Monitor command (monitor only)
    monitor_parser = subparsers.add_parser('monitor', help='Start transaction monitor')
    
    # Trace command
    trace_parser = subparsers.add_parser('trace', help='Trace a transaction')
    trace_parser.add_argument('tx_hash', nargs='?', help='Transaction hash to trace')
    trace_parser.add_argument('--raw', help='Raw transaction hex')
    trace_parser.add_argument('--raw-tx-json', help='Path to transaction JSON file')
    trace_parser.add_argument('--state', action='store_true', help='Show state changes')
    trace_parser.add_argument('--odf', help='Export to ODF file')
    trace_parser.add_argument('--chain', type=int, default=1, help='Chain ID')
    trace_parser.add_argument('--block', help='Block number for simulation')
    
    # Submit command
    submit_parser = subparsers.add_parser('submit', help='Submit a transaction')
    submit_parser.add_argument('file', nargs='?', help='Transaction file to submit')
    submit_parser.add_argument('--latest', action='store_true', help='Submit latest intercepted transaction')
    submit_parser.add_argument('--chain', type=int, default=1, help='Chain ID')
    
    args = parser.parse_args()
    
    # Default to 'start' if no command given
    if not args.command:
        args.command = 'start'
        args.port = 8545
    
    # Route to appropriate module
    if args.command == 'start':
        # Run the start script
        os.system('bash scripts/start.sh')
        
    elif args.command == 'intercept':
        from src.eth_interceptor.interceptor import app
        print(f"Starting interceptor on port {args.port}...")
        app.run(host="0.0.0.0", port=args.port, debug=False, use_reloader=False)
        
    elif args.command == 'monitor':
        from src.eth_interceptor.monitor import TransactionMonitor
        monitor = TransactionMonitor()
        monitor.watch()
        
    elif args.command == 'trace':
        # Import and run trace with arguments
        from src.eth_interceptor import trace
        sys.argv = ['trace.py']
        
        if args.tx_hash:
            sys.argv.append(args.tx_hash)
        elif args.raw or args.raw_tx_json:
            sys.argv.append('sim')
            
        if args.raw:
            sys.argv.extend(['--raw', args.raw])
        if args.raw_tx_json:
            sys.argv.extend(['--raw-tx-json', args.raw_tx_json])
        if args.state:
            sys.argv.append('--state')
        if args.odf:
            sys.argv.extend(['--odf', args.odf])
        if args.chain != 1:
            sys.argv.extend(['--chain', str(args.chain)])
        if args.block:
            sys.argv.extend(['--block', args.block])
            
        trace.main()
        
    elif args.command == 'submit':
        from src.eth_interceptor import submit_tx
        sys.argv = ['submit_tx.py']
        
        if args.latest:
            sys.argv.append('--latest')
        elif args.file:
            sys.argv.append(args.file)
        if args.chain != 1:
            sys.argv.extend(['--chain', str(args.chain)])
            
        submit_tx.main()

if __name__ == '__main__':
    main()